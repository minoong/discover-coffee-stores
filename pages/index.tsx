import type { GetStaticProps, NextPage } from 'next'
import Head from 'next/head'
import Image from 'next/image'
import { useCallback, useEffect, useState } from 'react'
import Banner from '~/components/banner'
import Card from '~/components/card'
import styles from '~/styles/Home.module.css'
import type { Places, Result } from '~/types/api/places'
import { fetchCoffeeStores } from '~/lib/coffee-stores'
import useGeolocation from '~/hooks/useGeolocation'
import { useSampleDispatch, useSampleState } from './_app'

const Home: NextPage<{ coffeeStores: Places['results'] }> = (props) => {
  const { coffeeStores } = props
  const { handleGeolocation, errorMessage, isLoading } = useGeolocation()
  const dispatch = useSampleDispatch()
  const state = useSampleState()
  const { latLong, coffeeStores: nearCoffeeStores } = state

  const [nearCoffeeStoresError, setNearCoffeeStoresError] = useState<string>()

  useEffect(() => {
    async function setCoffeeStoresByLocation() {
      if (!latLong) {
        return
      }

      try {
        const coffeeStores: Result[] = await fetch(
          `api/getCoffeeStoresByLocation?latLong=40.74356310868958,-73.99085595601952&limit=30`
        ).then((res) => res.json())
        // setNearCoffeeStores(coffeeStores)
        dispatch({ type: 'SET_COFFEE_STORES', payload: coffeeStores })
        setNearCoffeeStoresError('')
      } catch (err) {
        console.error(err)
        setNearCoffeeStoresError((err as unknown as Error).message)
      }
    }

    setCoffeeStoresByLocation()
  }, [dispatch, latLong])

  const handleOnBannerButtonClick = useCallback(() => {
    handleGeolocation()
  }, [handleGeolocation])

  return (
    <div className={styles.container}>
      <Head>
        <title>Coffee Connoisseur</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <Banner
          buttonText={isLoading ? 'Locating...' : 'View stores nearby'}
          onClickButton={handleOnBannerButtonClick}
        />
        {errorMessage && <p>Someting went wrong: {errorMessage}</p>}
        {nearCoffeeStoresError && (
          <p>Someting went wrong: {nearCoffeeStoresError}</p>
        )}
        <div className={styles.heroImage}>
          <Image
            src="/static/hero-image.png"
            width={700}
            height={400}
            alt="hero-image"
          />
          {nearCoffeeStores.length > 0 && (
            <div className={styles.sectionWrapper}>
              <h2 className={styles.heading2}>Stores near me</h2>
              <div className={styles.cardLayout}>
                {nearCoffeeStores.map((store) => (
                  <Card
                    key={store.fsq_id}
                    name={store.name}
                    imgUrl={'https://via.placeholder.com/260x160.png'}
                    href={`/coffee-store/${store.fsq_id}`}
                  />
                ))}
              </div>
            </div>
          )}
          {coffeeStores.length > 0 && (
            <div className={styles.sectionWrapper}>
              <h2 className={styles.heading2}>Toronto stores</h2>
              <div className={styles.cardLayout}>
                {coffeeStores.map((store) => (
                  <Card
                    key={store.fsq_id}
                    name={store.name}
                    imgUrl={'https://via.placeholder.com/260x160.png'}
                    href={`/coffee-store/${store.fsq_id}`}
                  />
                ))}
              </div>
            </div>
          )}
        </div>
      </main>

      <footer className={styles.footer}></footer>
    </div>
  )
}

export const getStaticProps: GetStaticProps = async (context) => {
  const coffeeStores = await fetchCoffeeStores()

  return {
    props: {
      coffeeStores,
    },
  }
}

export default Home
